<div class="form pull-left">
  <%= form_for @address, :html => { :class => 'form-horizontal float-up' } do |f| %>

    <% unless @address.errors.blank? %>
    <div class="alert alert-error">
      <% @address.errors.full_messages.each do |msg| %>
      <p><%= msg %></p>
      <% end %>
    </div>
    <% end %>
  
    <div class="control-group">
      <%= f.label "Heading", :class => 'control-label' %>
      <div class="controls">
        <%= f.text_field :label, :class => 'text_field', :placeholder => "Headquarter, Sales off. etc" %>
      </div>
    </div>
    
     <div class="control-group">
         <%= f.label :country, :class => 'control-label' %>
         <div class="controls">
           <%= f.country_select :country, priority: %w(US IN), prompt: 'Please select a country' %>
         </div>
       </div>

       <div class="control-group">
         <%= f.label :state, :class => 'control-label' %>
         <div class="controls">
           <%= render partial: 'subregion_select', locals: {parent_region: f.object.country} %>
         </div>
       </div>

      <div class="control-group">
        <%= f.label :city, :class => 'control-label' %>
        <div class="controls">
          <%= f.text_field :city, :class => 'text_field' %>
        </div>
      </div>
  
    <div class="control-group">
      <%= f.label :street_address, :class => 'control-label' %>
      <div class="controls">
        <%= f.text_field :street_address, :class => 'text_field' %>
      </div>
    </div>
  
    <div class="control-group">
      <%= f.label "street_address_two", :class => 'control-label' %>
      <div class="controls">
        <%= f.text_field :street_address_two, :class => 'text_field' %>
      </div>
    </div>
  
    <div class="control-group">
      <%= f.label :zipcode, :class => 'control-label' %>
      <div class="controls">
        <%= f.text_field :zipcode, :class => 'text_field' %>
      </div>
    </div>
    
    <%= f.hidden_field :latitude, :class => 'hidden_field' %>
    
    <%= f.hidden_field :longitude, :class => 'hidden_field' %>
    
  
    <div class="control-group">
      <%= f.label "Phone Number", :class => 'control-label' %>
      <div class="controls">
        <%= f.fields_for :phones do |phone| %>
        <div class="input-prepend">
          <span class="add-on">+</span>
          <%= phone.text_field :number, :class => 'span10', :placeholder => "Phone number" %>
        </div>
        <% end %>
        <span><%= link_to_add_association '+', f, :phones, :class => "btn btn-info" %></span>
      </div>
    </div>
  
    <div class="control-group">
      <%= f.label "Fax Number", :class => 'control-label' %>
      <div class="controls">
        <%= f.fields_for :faxs do |fax| %>
        <div class="input-prepend">
          <span class="add-on">+</span>
          <%= fax.text_field :number, :class => 'span10', :placeholder => "Fax number"%>
        </div>
        <% end %>
        <span><%= link_to_add_association '+', f, :faxs, :class => "btn btn-info" %></span>
      </div>
    </div>
  
      <div class="control-group">
        <%= f.label :email, :class => 'control-label' %>
        <div class="controls">
          <%= f.fields_for :emails do |email| %>
            <%= email.text_field :email, :class => 'text_field span8', :placeholder => "Email Address"%>
          <% end %>
          <span>&nbsp;&nbsp;<%= link_to_add_association '+', f, :emails, :class => "btn btn-info" %></span>
        </div>
      </div>
  

    <div class="form-actions">
      <%= f.submit nil, :class => 'btn btn-primary', :data => {:disable_with => "Saving..."} %>
      <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
                  addresses_path, :class => 'btn' %>
    </div>
  <% end %>
</div>

<div id="map_canvas" style="width:45%; height:400px; margin: 10px; background-color: #fff;" class="well pull-left">
</div>

<div class="clearfix"></div>

<script type="text/javascript">
  var geocoder;
  var map;
  var markersArray = [];
  //var marker;
  
  function setLatitudeLongitude(location){
    $("#address_latitude").val(location.Ya);
    $("#address_longitude").val(location.Za);
  }
  
</script>

<script>
  function initialize() {
    geocoder = new google.maps.Geocoder();
    var zoom_level;
    if (<%= @address.latitude.blank? %> || <%= @address.longitude.blank? %>) {
      var myLatlng = new google.maps.LatLng(<%= @address.default_coordinates[0] %>, <%= @address.default_coordinates[1] %>) ;
      zoom_level = 3;
    }
    else {
      var myLatlng = new google.maps.LatLng(<%= @address.latitude.to_f %>, <%= @address.longitude.to_f %>) ;
      zoom_level = 15;
      clearOverlays();
    }
    var mapOptions = {
      center: myLatlng,
      zoom: zoom_level,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
    };
    
    map = new google.maps.Map(document.getElementById("map_canvas"),
        mapOptions);  
    addMarker(myLatlng);
          
 }
 
 function codeAddress(address, zoom) {
   var address = address;
   geocoder.geocode( { 'address': address}, function(results, status) {
     if (status == google.maps.GeocoderStatus.OK) {
       map.setZoom(zoom);
       map.setCenter(results[0].geometry.location);
       clearOverlays();
       addMarker(results[0].geometry.location);
       setLatitudeLongitude(results[0].geometry.location);
     } else {
       alert("Address not found for the following reason: " + status);
     }
   });
 }
 
 
   function addMarker(location) {
     console.log(location);
     var marker = new google.maps.Marker({
       position: location,
       map: map,
       draggable: true,
       animation: google.maps.Animation.DROP,
     });
     markersArray.push(marker);
     google.maps.event.addListener(marker, 'dragend', function() {
         latLong = marker.getPosition();
         setLatitudeLongitude(latLong);
       });
     marker.setMap(map);
   }

   // Removes the overlays from the map, but keeps them in the array
   function clearOverlays() {
     if (markersArray) {
       for (i in markersArray) {
         markersArray[i].setMap(null);
       }
     }
   }

   // Shows any overlays currently in the array
   function showOverlays() {
     if (markersArray) {
       for (i in markersArray) {
         markersArray[i].setMap(map);
       }
     }
   }

   // Deletes all markers in the array by removing references to them
   function deleteOverlays() {
     if (markersArray) {
       for (i in markersArray) {
         markersArray[i].setMap(null);
       }
       markersArray.length = 0;
     }
   }
 
  function loadScript() {
   var script = document.createElement("script");
   script.type = "text/javascript";
   script.src = "http://maps.googleapis.com/maps/api/js?key=AIzaSyAiWC6EU28mQk9du90WHXUQTSTaE48FlFw&libraries=places&sensor=false&callback=initialize";
   document.body.appendChild(script);
  }

  window.onload = loadScript;
</script>

<script>
  
  $("#address_country").live('change', function(){
    updateAddress(5);
  });
  
  $("#address_state").live('change', function(){
    updateAddress(7);
  });

  $("#address_city").live('change', function(){
    updateAddress(10);
  });
  
  $("#address_street_address").live('change', function(){
    updateAddress(13);
  });
  
  $("#address_street_address_two").live('change', function(){
    updateAddress(15)
  });
  
  function updateAddress(zoom){
    var address = "";
    var state = $("#address_state").val();
    var country = $("#address_country").val();
    var city = $("#address_city").val();
    var street = $("#address_street_address").val();
    var street2 = $("#address_street_address_two").val();
    if (street) { address = street + ", " ;}
    if (street2) { address += street2 + ", " ;}
    if (city) { address += city + ", " ;}
    if (state) { address += state + ", " ;}
    if (country) { address += country;}
    codeAddress(address, zoom);
  }
</script>